// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function empty(param) {
  return /* Nil */0;
}

function $$return(x, param) {
  return /* Cons */{
          _0: x,
          _1: empty
        };
}

function to_list(seq) {
  var match = Curry._1(seq, undefined);
  if (match) {
    return {
            hd: match._0,
            tl: to_list(match._1)
          };
  } else {
    return /* [] */0;
  }
}

function of_list(list) {
  if (!list) {
    return empty;
  }
  var xs = list.tl;
  var x = list.hd;
  return function (param) {
    return /* Cons */{
            _0: x,
            _1: of_list(xs)
          };
  };
}

function map(f, seq) {
  var match = Curry._1(seq, undefined);
  if (!match) {
    return empty;
  }
  var xs = match._1;
  var x = match._0;
  return function (param) {
    return /* Cons */{
            _0: Curry._1(f, x),
            _1: map(f, xs)
          };
  };
}

function filter(pred, _seq) {
  while(true) {
    var seq = _seq;
    var match = Curry._1(seq, undefined);
    if (!match) {
      return empty;
    }
    var xs = match._1;
    var x = match._0;
    if (Curry._1(pred, x)) {
      return (function(x,xs){
      return function (param) {
        return /* Cons */{
                _0: x,
                _1: filter(pred, xs)
              };
      }
      }(x,xs));
    }
    _seq = xs;
    continue ;
  };
}

function filter_map(f, _seq) {
  while(true) {
    var seq = _seq;
    var match = Curry._1(seq, undefined);
    if (!match) {
      return empty;
    }
    var xs = match._1;
    var y = Curry._1(f, match._0);
    if (y !== undefined) {
      var y$1 = Caml_option.valFromOption(y);
      return (function(xs,y$1){
      return function (param) {
        return /* Cons */{
                _0: y$1,
                _1: filter_map(f, xs)
              };
      }
      }(xs,y$1));
    }
    _seq = xs;
    continue ;
  };
}

function append(seq1, seq2) {
  var match = Curry._1(seq1, undefined);
  if (!match) {
    return seq2;
  }
  var xs = match._1;
  var x = match._0;
  return function (param) {
    return /* Cons */{
            _0: x,
            _1: append(xs, seq2)
          };
  };
}

function flat_map(f, seq) {
  var match = Curry._1(seq, undefined);
  if (match) {
    return append(Curry._1(f, match._0), flat_map(f, match._1));
  } else {
    return empty;
  }
}

function fold_left(f, _accumulator, _seq) {
  while(true) {
    var seq = _seq;
    var accumulator = _accumulator;
    var match = Curry._1(seq, undefined);
    if (!match) {
      return accumulator;
    }
    _seq = match._1;
    _accumulator = Curry._2(f, accumulator, match._0);
    continue ;
  };
}

function iter(f, _seq) {
  while(true) {
    var seq = _seq;
    var match = Curry._1(seq, undefined);
    if (!match) {
      return ;
    }
    Curry._1(f, match._0);
    _seq = match._1;
    continue ;
  };
}

var $at$tilde = append;

exports.empty = empty;
exports.$$return = $$return;
exports.to_list = to_list;
exports.of_list = of_list;
exports.map = map;
exports.filter = filter;
exports.filter_map = filter_map;
exports.append = append;
exports.$at$tilde = $at$tilde;
exports.flat_map = flat_map;
exports.fold_left = fold_left;
exports.iter = iter;
/* No side effect */
